# encrypt.py

# AES S-box (SubBytes lookup table)
S_BOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


# Round constant for key expansion
R_CON = [
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
]


# --- Utility functions ---
def sub_bytes(state):
    """Substitute bytes using AES S-box."""
    # replace each byte with S_BOX[value]
    return [[S_BOX[byte] for byte in row] for row in state]

def shift_rows(state):
    """Cyclically shift rows of the state."""
    new_state = [row[:] for row in state]
    new_state[1] = new_state[1][1:] + new_state[1][:1]
    new_state[2] = new_state[2][2:] + new_state[2][:2]
    new_state[3] = new_state[3][3:] + new_state[3][:3]
    return new_state

    
def mix_columns(state):
    """Mix columns using the AES polynomial transformation."""
    for i in range(4):
        a = state[0][i]
        b = state[1][i]
        c = state[2][i]
        d = state[3][i]

        state[0][i] = gmul(a, 2) ^ gmul(b, 3) ^ gmul(c, 1) ^ gmul(d, 1)
        state[1][i] = gmul(a, 1) ^ gmul(b, 2) ^ gmul(c, 3) ^ gmul(d, 1)
        state[2][i] = gmul(a, 1) ^ gmul(b, 1) ^ gmul(c, 2) ^ gmul(d, 3)
        state[3][i] = gmul(a, 3) ^ gmul(b, 1) ^ gmul(c, 1) ^ gmul(d, 2)
    return state


def gmul(a, b):
    """Galois Field (2^8) multiplication of a and b."""
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a = (a << 1) & 0xFF
        if hi_bit_set:
            a ^= 0x1B  # AES irreducible polynomial x^8 + x^4 + x^3 + x + 1
        b >>= 1
    return p


def add_round_key(state, round_key):
    """XOR the state with the round key."""
    return [[s ^ k for s, k in zip(row_s, row_k)] for row_s, row_k in zip(state, round_key)]

def key_expansion(key):
    """Generate 11 round keys (for AES-128)."""
    Nk = 4  # key length in words (4 words = 16 bytes)
    Nb = 4
    Nr = 10  # number of rounds

    key_symbols = [b for b in key]
    assert len(key_symbols) == 16

    # First 4 words are the original key
    words = [key_symbols[i:i+4] for i in range(0, 16, 4)]

    for i in range(Nk, Nb * (Nr + 1)):
        temp = words[i - 1][:]
        if i % Nk == 0:
            # RotWord
            temp = temp[1:] + temp[:1]
            # SubWord
            temp = [S_BOX[b] for b in temp]
            # Rcon
            temp[0] ^= R_CON[(i // Nk) - 1][0]
        # XOR with word Nk positions earlier
        words.append([a ^ b for a, b in zip(words[i - Nk], temp)])

    round_keys = []
    for r in range(Nr + 1):
        w = words[4 * r: 4 * (r + 1)]  # w[0..3], each is a 4-byte list (word)
        # Build matrix[row][col] so columns are words (column-major)
        round_key = [[w[col][row] for col in range(4)] for row in range(4)]
        round_keys.append(round_key)

    return round_keys


def encrypt_block(plaintext_block, key):
    """Encrypt one 16-byte block."""
    state = bytes_to_matrix(plaintext_block)
    round_keys = key_expansion(key)

    # Initial round
    state = add_round_key(state, round_keys[0])

    # 9 main rounds
    for i in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[i])

    # Final round
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[10])

    return matrix_to_bytes(state)

# --- Helpers to convert between bytes and matrices ---
def bytes_to_matrix(text):
    """Convert 16-byte array into 4x4 state matrix in column-major order:
       state[row][col] = text[col*4 + row]
    """
    assert len(text) == 16
    return [[text[col*4 + row] for col in range(4)] for row in range(4)]

def matrix_to_bytes(matrix):
    """Convert 4x4 state matrix (column-major) back to bytes in the same order."""
    return bytes([matrix[row][col] for col in range(4) for row in range(4)])
